[
    {
        "sample_order": 1,
        "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    return item - bins\n\n",
        "score": -2091.8
    },
    {
        "sample_order": 2,
        "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacities = bins\n    \n    # Initialize priority scores\n    priorities = np.zeros_like(bins)\n    \n    # Calculate priority scores\n    for i in range(len(bins)):\n        if remaining_capacities[i] >= item:\n            # If the item fits, we want a higher score (preferable)\n            priorities[i] = remaining_capacities[i] - item\n        else:\n            # If the item does not fit, give a lower score (penalty)\n            priorities[i] = -float('inf')  # Alternatively, you could use a very negative number\n            \n    return priorities\n\n",
        "score": null
    },
    {
        "sample_order": 3,
        "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacity = bins - item\n    \n    # Initialize priority scores\n    priority_scores = np.zeros_like(bins)\n    \n    # Assign priority scores based on remaining capacity (considering only bins that can fit the item)\n    priority_scores[remaining_capacity >= 0] = remaining_capacity[remaining_capacity >= 0]\n    \n    return priority_scores\n\n",
        "score": -5000.0
    },
    {
        "sample_order": 4,
        "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacity = bins - item\n    \n    # Calculate priority score: if bin is full or cannot accommodate the item, set priority to 0\n    priority_scores = np.where(remaining_capacity < 0, 0, remaining_capacity)\n    \n    # Optionally, normalize the scores based on bin capacities\n    # Normalize to the range [0, 1]\n    normalized_scores = priority_scores / bins\n    \n    # Return the normalized scores\n    return normalized_scores\n\n",
        "score": -5000.0
    },
    {
        "sample_order": 5,
        "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    remaining_capacity = bins  # Assuming bins contains the current capacity of each bin.\n    \n    # Calculate the priority\n    priority_scores = remaining_capacity - item\n    \n    # Setting a lower bound (e.g., -item) to indicate that the item can't fit\n    priority_scores[remaining_capacity < item] = -item  # Or any other low value\n  \n    return priority_scores\n\n",
        "score": -5000.0
    },
    {
        "sample_order": 6,
        "function": "def priority(item: float, bins: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins: Array of capacities for each bin.\n    Return:\n        Array of same size as bins with priority score of each bin.\n    \"\"\"\n    available_space = bins - item\n    \n    # Assign negative priority to bins that cannot accommodate the item\n    available_space[available_space < 0] = -np.inf\n    \n    return available_space\n\n",
        "score": null
    }
]